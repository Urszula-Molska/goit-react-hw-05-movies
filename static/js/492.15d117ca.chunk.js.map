{"version":3,"file":"static/js/492.15d117ca.chunk.js","mappings":"2UACIA,EAAS,mCAEAC,EAAa,mCAAG,6FACrBC,EADqB,kEAC4CF,EAD5C,6BAGFG,EAAAA,EAAAA,IAAA,UAAaD,IAHX,cAGnBE,EAHmB,yBAIlBA,EAASC,MAJS,gCAMzBC,QAAQC,MAAR,MANyB,yDAAH,qDAUbC,EAAY,mCAAG,WAAMC,GAAN,gFACpBP,EADoB,6CACwBO,EADxB,oBAC2CT,EAD3C,6BAGDG,EAAAA,EAAAA,IAAA,UAAaD,IAHZ,cAGlBE,EAHkB,yBAIjBA,EAASC,MAJQ,gCAMxBC,QAAQC,MAAR,MANwB,yDAAH,sDAUZG,EAAS,mCAAG,WAAMD,GAAN,gFACjBP,EADiB,6CAC2BO,EAD3B,4BACsDT,EADtD,6BAGEG,EAAAA,EAAAA,IAAA,UAAaD,IAHf,cAGfE,EAHe,yBAIdA,EAASC,MAJK,gCAMrBC,QAAQC,MAAR,MANqB,yDAAH,sDAUTI,EAAY,mCAAG,WAAMF,GAAN,gFACpBP,EADoB,6CACwBO,EADxB,4BACmDT,EADnD,6BAGDG,EAAAA,EAAAA,IAAA,UAAaD,IAHZ,cAGlBE,EAHkB,yBAIjBA,EAASC,KAAKO,SAJG,gCAMxBN,QAAQC,MAAR,MANwB,yDAAH,sDAUZM,EAAW,mCAAG,WAAMC,GAAN,gFACnBZ,EADmB,4DACwCF,EADxC,kBACwDc,GADxD,kBAGAX,EAAAA,EAAAA,IAAA,UAAaD,IAHb,cAGjBE,EAHiB,yBAIhBA,EAASC,KAAKO,SAJE,gCAMvBN,QAAQC,MAAR,MANuB,yDAAH,qD,2KCrCXQ,EAAU,WACrB,IAAQN,GAAYO,EAAAA,EAAAA,MAAZP,QACR,GAAwCQ,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAW,WACf,IAAMC,ECQU,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDRCG,GACjB,OAAOV,CACR,EAYD,OAVAW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qGACUtB,EAAAA,EAAAA,IAAaF,GADvB,QACXS,EADW,QAEAgB,OAAS,GACxBf,EAAgBD,GAHD,2CAAH,qDAMhBe,EAAWxB,EACZ,GAAE,CAACA,KAGF,iCACE,oCACyB,IAAxBS,EAAagB,QACZ,8DAEA,wBACGhB,EAAaiB,KAAI,SAAAC,GAAM,OACtB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFJlB,IADa,QAUjC,EAID,G","sources":["components/Api/Api.js","components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nlet ApiKey = '209b988e1e5a3c54f84bfbe290fdf3e2';\n\nexport const fetchTrending = async () => {\n  const URL = `https://api.themoviedb.org/3/trending/movie/day?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchDetails = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchCast = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  const URL = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${ApiKey}&page=1`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchSearch = async query => {\n  const URL = `https://api.themoviedb.org/3/search/movie?api_key=${ApiKey}&query=${query}`;\n  try {\n    const response = await axios.get(`${URL}`);\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from '../Api/Api.js';\nimport { nanoid } from 'nanoid';\n\nexport const Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n\n  const createId = () => {\n    const idReview = nanoid();\n    return idReview;\n  };\n\n  useEffect(() => {\n    const getReviews = async () => {\n      const movieReviews = await fetchReviews(movieId);\n      if (movieReviews.length > 0) {\n        setMovieReviews(movieReviews);\n      }\n    };\n    getReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      <h2>Reviews</h2>\n      {movieReviews.length === 0 ? (\n        <p>There is no review for this movie</p>\n      ) : (\n        <ul>\n          {movieReviews.map(review => (\n            <li key={createId()}>\n              <h3>author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\nReviews.propTypes = {\n  movieReviews: PropTypes.arrayOf(PropTypes.object),\n};\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ApiKey","fetchTrending","URL","axios","response","data","console","error","fetchDetails","movieId","fetchCast","fetchReviews","results","fetchSearch","query","Reviews","useParams","useState","movieReviews","setMovieReviews","createId","idReview","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","useEffect","getReviews","length","map","review","author","content"],"sourceRoot":""}